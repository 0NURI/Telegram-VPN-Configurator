using System.Text;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using static VpnBot.BotConfig;
using static VpnBot.SessionState;
using static VpnBot.FileManager;
using static VpnBot.BoolChecks;
using static VpnBot.BotKeyboards;

namespace VpnBot;

public static class CommandLogic
{
    async public static Task VpnChanging(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        {
            VPNChangingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            var lines = await DownloadFileAsLines(yamlPath);
            var InputInfo = msg.Text.Split('\n');
            if (InputInfo.Length < 5)
            {
                await bot.SendMessage(msg.Chat.Id, "‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–≤—ë–ª –≤—Å–µ 5 —Å—Ç—Ä–æ–∫.");
                VPNChangingQueue[msg.Chat.Id] = false;
                return;
            }
            int start = lines.FindIndex(line => line == "  - name: \"MYVPN\"");
            int end = lines.FindIndex(start + 1, line => line == "proxy-groups:") - 1;
            lines.RemoveRange(start + 1, end - start - 1);
            string[] OutputInfo = [$"    type: {InputInfo[0]}", $"    server: {InputInfo[1]}", $"    port: {InputInfo[2]}", $"    cipher: {InputInfo[3]}", $"    password: \"{InputInfo[4]}\""];
            lines.InsertRange(start + 1, OutputInfo);
            await UploadFileFromLines(yamlPath, lines);
            VPNChangingQueue[msg.Chat.Id] = false;
            await bot.SendMessage(msg.Chat.Id, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!");
        }
    }

    async public static Task RulesAdding(ITelegramBotClient bot, Message msg)
    {
        Rules = await ReadFile(yamlPath);
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞")
        {
            RulesAddingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            List<string> DomainToAdd = [];
            foreach (string element in msg.Text.Split('\n'))
            {
                var domain = element.Trim().ToLower();
                if (!Rules.Contains(domain) && DomainCheck(domain))
                {
                    DomainToAdd.Add(domain.Trim().ToLower());
                }
                else if (Rules.Contains(domain)) await bot.SendMessage(chatId: msg.Chat.Id, text: $"‚ùå `{domain}`" + " - –¥–æ–º–µ–Ω —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ä–∞–Ω–µ–µ", parseMode: ParseMode.Markdown);
                else await bot.SendMessage(chatId: msg.Chat.Id, text: $"‚ùå `{domain}`" + " - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞", parseMode: ParseMode.Markdown);
            }
            Rules.AddRange(DomainToAdd);
            await bot.SendMessage(chatId: msg.Chat.Id, $"‚úÖ –î–æ–º–µ–Ω—ã, –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫—É, –¥–æ–±–∞–≤–ª–µ–Ω—ã!", parseMode: ParseMode.Markdown);
            await UpdateRulesClashYaml(Rules);
            RulesAddingQueue[msg.Chat.Id] = false;
            if (DomainToAdd.Count > 0) await bot.SendMessage(SUPERADMIN_ID, $"üî® @{msg.Chat.Username} –¥–æ–±–∞–≤–∏–ª –¥–æ–º–µ–Ω—ã\n<code>{string.Join('\n', DomainToAdd)}</code>", parseMode: ParseMode.Html);

        }
    }

    public static async Task RulesDeleting(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É —É–¥–∞–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞")
        {
            RulesDeletingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "ü§∑ –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            Rules = await ReadFile(yamlPath);
            var splitNums = msg.Text.Split(' ').OrderByDescending(x => x).ToList();
            List<string> Repeated = [];
            List<string> DeleteAwaiting = [];
            foreach (string element in splitNums)
            {
                if (!Int32.TryParse(element, out int num)){
                    await bot.SendMessage(chatId: msg.Chat.Id, $"‚ùå `{element}` - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞", parseMode: ParseMode.Markdown);
                    FileQueue[msg.Chat.Id] = false;
                }
                else if (splitNums.Count(x => x == num.ToString()) > 1)
                {
                    if (!Repeated.Contains(element))
                    {
                        await bot.SendMessage(chatId: msg.Chat.Id, $"‚ùå `{element}` - –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞–∂–¥—ã", parseMode: ParseMode.Markdown);
                        Repeated.Add(element);
                    }
                }
                else if (num > UserRuleSnapshots[msg.Chat.Id].Count || num < 1) await bot.SendMessage(chatId: msg.Chat.Id, $"‚ùå `{element}` - –≤—ã—Ö–æ–¥ –∑–∞ —Ä–∞–º–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª", parseMode: ParseMode.Markdown);
                else DeleteAwaiting.Add(UserRuleSnapshots[msg.Chat.Id][num - 1]);
            }
            foreach (string element in DeleteAwaiting)
            {
                if (Rules.Contains(element)) Rules.Remove(element);
            }

            await bot.SendMessage(chatId: msg.Chat.Id, $"‚úÖ –î–æ–º–µ–Ω—ã —Å –≤–µ—Ä–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã!", parseMode: ParseMode.Markdown);
            await UpdateRulesClashYaml(Rules);
            RulesDeletingQueue[msg.Chat.Id] = false;
            if (DeleteAwaiting.Count > 0) await bot.SendMessage(SUPERADMIN_ID, $"üí• @{msg.Chat.Username} —É–¥–∞–ª–∏–ª –¥–æ–º–µ–Ω—ã\n<code>{string.Join('\n', DeleteAwaiting)}</code>", parseMode: ParseMode.Html);
        }
    }
    public static async Task UserAdding(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        {
            UserAddingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            var UserInfo = msg.Text.Split(',');
            if (UserInfo.Count() != 2 || !long.TryParse(UserInfo[0], out long num) || string.IsNullOrWhiteSpace(UserInfo[0]) || string.IsNullOrWhiteSpace(UserInfo[0]))
            {
                await bot.SendMessage(msg.Chat.Id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö");
                UserAddingQueue[msg.Chat.Id] = false;
                return;
            }
            var lines = await DownloadFileAsLines(usersPath);
            string result = string.Join(',', UserInfo);
            if (lines.Any(x => x.Substring(0, x.IndexOf(',')) == UserInfo[0]))
            {
                await bot.SendMessage(msg.Chat.Id, "‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ");
                UserAddingQueue[msg.Chat.Id] = false;
                return;
            }
            if (!lines.Contains(result))
            {
                lines.Add(string.Join(',', UserInfo.Select(x => x.Trim())));
                await UploadFileFromLines(usersPath, lines);
                await bot.SendMessage(msg.Chat.Id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
                UserAddingQueue[msg.Chat.Id] = false;
            }
            else await bot.SendMessage(msg.Chat.Id, "‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ");
            UserAddingQueue[msg.Chat.Id] = false;
        }
    }
    public static async Task UserDeleting(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        {
            UserDeletingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            var UserInfo = msg.Text;
            if (msg.Text.Equals(msg.Chat.Id.ToString()))
            {
                await bot.SendMessage(msg.Chat.Id, "‚ùå –°–µ–±—è —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è");
                UserDeletingQueue[msg.Chat.Id] = false;
                return;
            }
            var lines = await DownloadFileAsLines(usersPath);
            foreach (var element in lines)
            {
                if (msg.Text.Equals(element[..element.IndexOf(',')]))
                {
                    lines.Remove(element);
                    await UploadFileFromLines(usersPath, lines);
                    await bot.SendMessage(msg.Chat.Id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
                    UserDeletingQueue[msg.Chat.Id] = false;
                    return;
                }
            }
            await bot.SendMessage(msg.Chat.Id, "‚ùå –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            UserDeletingQueue[msg.Chat.Id] = false;

        }
    }
    public static async Task Speaking(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        {
            SpeakingQueue[msg.Chat.Id] = false;
            return;
        }
        if (string.IsNullOrWhiteSpace(msg.Text)){
            await bot.SendMessage(chatId: msg.Chat.Id, text: "ü§∑ –ü—É—Å—Ç–æ–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            var Users = await LoadUsers(usersPath);
            foreach (var chatId in Users)
            {
                await bot.SendMessage(chatId.Key, msg.Text);
            }
            await bot.SendMessage(chatId: msg.Chat.Id, $"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–æ!", parseMode: ParseMode.Markdown);
            SpeakingQueue[msg.Chat.Id] = false;
        }
    }
    public static async Task FileReplacing(ITelegramBotClient bot, Message msg)
    {
        if (msg.Text == "üëé –ù–µ —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –∑–∞–º–µ–Ω—É")
        {
            FileQueue[msg.Chat.Id] = false;
            return;
        }
        if (msg.Type != MessageType.Document)
        {
            await bot.SendMessage(chatId: msg.Chat.Id, text: "‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            FileQueue[msg.Chat.Id] = false;
        }
        else
        {
            var fileName = msg.Document?.FileName?.ToLower();
            if(fileName == null || !fileName.EndsWith(".yaml") || msg.Document == null)
            {
                await bot.SendMessage(msg.Chat.Id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑");
                FileQueue[msg.Chat.Id] = false;
            }
            else {
                var file = await bot.GetFile(msg.Document.FileId);

                using (var fs = new FileStream(yamlPath, FileMode.Create))
                {
                    await bot.DownloadFile(file.FilePath!, fs);
                }
                await bot.SendMessage(msg.Chat.Id, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω!", replyMarkup: MenuKeyboard);
                FileQueue[msg.Chat.Id] = false;
            }
        }
    }
}
